clear all;
close all;

%% image
im_name = 'D:\Data\joris\images\512x512\lena.tif'; 
raw_denoising = 0; % set to 0 if groundtruth image is available
                   % for raw EM images, this should be 1

%% denoising params -- these params can be tuned according to the
%% application
W = 4; % search window to look for similar pixels (size [2W+1]x[2W+1])
       % significantly influences computation time
h = 3.8; % weight control parameter, controls 'amount' of denoising
wnd_size = 5; % window size to compare pixel regions (size [2wnd_size+1]x[2wnd_size+1])
              % significantly influences computation time
% gradient descent params -- these params can be tuned according to the
% application
num_iter = 10; % number of iterations: more iterations will give better results

%% blur params
f_size = 7; % size of the (gaussian) blur kernel
f_sigma = 3; % sigma of the (gaussian) blur kernel

%% noise params
sigma_0 = 20; 
alpha = 0.05; 
em_corr_filter = [-0.005860504805239,...
                  -0.004145631049324,...
                  -0.007101863416801,...
                  -0.014007610052560,...
                  -0.018027659775297,...
                  -0.020445501436001,...
                  -0.022359319281906,...
                  -0.027855476658843,...
                  -0.037852223103446,...
                  -0.061583547802863,...
                  -0.105639357469836,...
                  -0.204771839660892,...
                  -0.362827110355747,...
                  -0.494054551997909,...
                   0.570451552004579,...
                   2.632161289724167,...
                   0.570451552004579,...
                  -0.494054551997909,...
                  -0.362827110355747,...
                  -0.204771839660892,...
                  -0.105639357469836,...
                  -0.061583547802863,...
                  -0.037852223103446,...
                  -0.027855476658843,...
                  -0.022359319281906,...
                  -0.020445501436001,...
                  -0.018027659775297,...
                  -0.014007610052560,...
                  -0.007101863416801,...
                  -0.004145631049324,...
                  -0.005860504805239];
em_corr_filter_inv =  [0.010323879069783,...
                       0.010370735399349,...
                       0.010891887108576,...
                       0.012328012363843,...
                       0.013008813866401,...
                       0.014891073349192,...
                       0.015807804797114,...
                       0.019160308488332,...
                       0.019906889609562,...
                       0.027474521331366,...
                       0.024528903211449,...
                       0.047905035553926,...
                       0.016986801150247,...
                       0.129162751099163,...
                      -0.122060533822016,...
                       0.498626234847429,...
                      -0.122060533822016,...
                       0.129162751099163,...
                       0.016986801150247,...
                       0.047905035553926,...
                       0.024528903211449,...
                       0.027474521331366,...
                       0.019906889609562,...
                       0.019160308488332,...
                       0.015807804797114,...
                       0.014891073349192,...
                       0.013008813866401,...
                       0.012328012363843,...
                       0.010891887108576,...
                       0.010370735399348,...
                       0.010323879069783];

weighting_function_name = 'MODIFIED_BISQUARE'; 
lambda = 0.1; % regularization param
%%

%% load image
sig_orig = double(imread(im_name)); 
%% 

%% construct blurred, noisy image if necessary
if raw_denoising
    sig = sig_orig;
else
    blur_kernel = fspecial('gaussian', f_size, f_sigma);
    img_blurred = imfilter(sig_orig, blur_kernel, 'symmetric');
    noise = randn(size(sig_orig));
    corr_noise = imfilter(noise, em_corr_filter, 'symmetric');
    corr_noise = corr_noise / std2(corr_noise);
    sigma = sigma_0*ones(size(sig_orig)) + alpha*sig_orig;
    sig = sig_orig + sigma.*corr_noise;
    img_blurred_noisy = img_blurred + sigma.*corr_noise;
end
%% 

%% deconvolution
tic
sig_est_deconv = fNLMS_SCB(img_blurred_noisy, blur_kernel, lambda, ...
                           h, em_corr_filter_inv, alpha, sigma_0, W, wnd_size, weighting_function_name, ...
                           zeros(size(sig_orig)), num_iter);
[NLMS_img_cum, NLMS_weights_cum] = fNLMS_SC(img_blurred_noisy, img_blurred_noisy, h, em_corr_filter_inv, alpha, sigma_0, W, wnd_size, weighting_function_name);
sig_est_denois = NLMS_img_cum./NLMS_weights_cum;
toc
%%

%% visualize results
if raw_denoising
    figure,imshow(sig,[]),title(sprintf('blurred, noisy image'));
    figure,imshow(sig_est_denois,[]),title(sprintf('denoised image'));
    figure,imshow(sig_est_deconv,[]),title(sprintf('deconvolved image'));
else
    figure,imshow(sig_orig,[0,255]);
    disp(sprintf('blurred, noisy image PSNR=%f dB', PSNR(sig,sig_orig)));
    disp(sprintf('denoised image PSNR=%f dB', PSNR(sig_est_denois,sig_orig)));
    disp(sprintf('deconvolved image PSNR=%f dB', PSNR(sig_est_deconv,sig_orig)));
    figure,imshow(sig,[0,255]),title(sprintf('noisy image PSNR=%f dB', PSNR(sig,sig_orig)));
    figure,imshow(sig_est_denois,[0,255]),title(sprintf('denoised image PSNR=%f dB', PSNR(sig_est_denois,sig_orig)));
    figure,imshow(sig_est_deconv,[0,255]),title(sprintf('deconvolved image PSNR=%f dB', PSNR(sig_est_deconv,sig_orig)));
end
%% 