close all;
clear all;

%% image
im_name = 'D:\Data\joris\images\512x512\lena.tif'; 
raw_denoising = 0; % set to 0 if groundtruth image is available
                   % for raw EM images, this should be 1

%% denoising params -- these params can be tuned according to the
%% application
W = 4; % search window to look for similar pixels (size [2W+1]x[2W+1])
       % significantly influences computation time
h = 80; % weight control parameter, controls 'amount' of denoising
wnd_size = 5; % window size to compare pixel regions (size [2wnd_size+1]x[2wnd_size+1])
              % significantly influences computation time
                   
% noise params
sigma_0 = 20; % noise standard deviation
alpha = 0.05; % noise signal dependency: 0 corresponds with independency, 
              % larger values correspond with stronger dependency
em_corr_filter = [-0.005860504805239,... % autocorrelation filter for EM noise
                  -0.004145631049324,...
                  -0.007101863416801,...
                  -0.014007610052560,...
                  -0.018027659775297,...
                  -0.020445501436001,...
                  -0.022359319281906,...
                  -0.027855476658843,...
                  -0.037852223103446,...
                  -0.061583547802863,...
                  -0.105639357469836,...
                  -0.204771839660892,...
                  -0.362827110355747,...
                  -0.494054551997909,...
                   0.570451552004579,...
                   2.632161289724167,...
                   0.570451552004579,...
                  -0.494054551997909,...
                  -0.362827110355747,...
                  -0.204771839660892,...
                  -0.105639357469836,...
                  -0.061583547802863,...
                  -0.037852223103446,...
                  -0.027855476658843,...
                  -0.022359319281906,...
                  -0.020445501436001,...
                  -0.018027659775297,...
                  -0.014007610052560,...
                  -0.007101863416801,...
                  -0.004145631049324,...
                  -0.005860504805239];

weighting_function_name = 'MODIFIED_BISQUARE'; 
%% 

%% load image
sig_orig = double(imread(im_name)); 
%% 

%% construct noisy image if necessary
if raw_denoising
    sig = sig_orig;
else
    noise = randn(size(sig_orig));
    corr_noise = imfilter(noise, em_corr_filter, 'symmetric');
    corr_noise = corr_noise / std2(corr_noise);
    sigma = sigma_0*ones(size(sig_orig)) + alpha*sig_orig;
    sig = sig_orig + sigma.*corr_noise;
end
%% 

%% denoising
tic
[sig_accum, weights_accum] = fNLMS(sig, sig, h, W, wnd_size, weighting_function_name);
sig_est = sig_accum./weights_accum;
toc
%% 

%% visualize results
figure,
if raw_denoising
    subplot(121),imshow(sig,[]),title(sprintf('noisy image'));
    subplot(122),imshow(sig_est,[]),title(sprintf('denoised image'));
else
    disp(sprintf('noisy image PSNR=%f dB', PSNR(sig,sig_orig)));
    disp(sprintf('denoised image PSNR=%f dB', PSNR(sig_est,sig_orig)));
    subplot(121),imshow(sig,[0,255]),title(sprintf('noisy image PSNR=%f dB', PSNR(sig,sig_orig)));
    subplot(122),imshow(sig_est,[0,255]),title(sprintf('denoised image PSNR=%f dB', PSNR(sig_est,sig_orig)));
end
%% 